---
title: "Mon Yuka 🥕 avec Python 🐍"
eval: false
execute:
  cache: true
  keep-ipynb: true
---


Ce notebook vise à présenter pas à pas comment créer une application interactive
avec `Streamlit` reproduisant celle proposée sur [myyuka.lab.sspcloud.fr](https://myyuka.lab.sspcloud.fr/).

Cet exercice est proposé dans le cadre du `Funathon` (hackathon non compétitif)
organisé en 2023 par l'Insee et le Ministère de l'Agriculture sur le thème _"Du champ à l'assiette"_. 
Les autres sujets sont disponibles
sur le [`Github InseeFrLab`](https://github.com/InseeFrLab/funathon2023). 

::: {.content-visible when-format="html"}

Pour les personnes bénéficiant d'un compte sur
l'infrastructure [`SSP Cloud`](https://www.onyxia.sh/)
vous pouvez cliquer sur le lien ci-dessous pour lancer un 
environnement `Jupyter` prêt-à-l'emploi
[![Onyxia](https://img.shields.io/badge/SSPcloud-Tester%20via%20SSP--cloud-informational&color=yellow?logo=Python)](https://datalab.sspcloud.fr/launcher/ide/jupyter-python?autoLaunch=false&kubernetes.role=%C2%ABadmin%C2%BB&networking.user.enabled=true&git.cache=%C2%AB36000%C2%BB&init.personalInit=%C2%ABhttps%3A%2F%2Fraw.githubusercontent.com%2FInseeFrLab%2Ffunathon2023_sujet4%2Fmain%2Finit.sh%C2%BB&git.token=%C2%AB%C2%BB&git.repository=%C2%ABhttps%3A%2F%2Fgithub.com%2FInseeFrLab%2Ffunathon2023_sujet4.git%C2%BB)
Il s'agit de l'approche recommandée si vous avez un compte sur cette plateforme de l'Etat.


Si vous ne disposez pas d'un tel environnement, il est possible de consulter
cette page à travers un _notebook_
depuis `Google Colab` [![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](http://colab.research.google.com/github/InseeFrLab/funathon2023_sujet4/blob/main/index.ipynb). Néanmoins, tous les exemples ne seront pas reproductibles
puisque, par exemple, certains nécessitent d'être en mesure de lancer une application _web_
depuis `Python`,
ce qui n'est pas possible sur `Google Colab`.

:::

En amont de l'exécution de ce notebook, il est recommandé d'installer 
l'ensemble des packages utilisés dans ce projet avec la commande
suivante :

```{python}
#| eval: false
pip install -r requirements.txt
```

# Objectif et approche pédagogique

L'objectif de ce projet est d'apprendre à utiliser `Python` pour créer des 
applications réactives avec `Streamlit` mais aussi de se familiariser à
la manipulation de données avec `Python` et, au passage, à quelques bonnes
pratiques utiles pour obtenir des projets plus lisibles et reproductibles. 


Pour parvenir à cet objectif, il est possible d'emprunter plusieurs voies,
plus ou moins guidées. Celles-ci sont là pour permettre que ce sujet 
soit réalisable. Elles sont balisées de la manière suivante :

| Balisage | Approche | Prérequis de niveau | Objectif pédagogique |
|--------|---------|----------------|-------------------|
| 🟡 | Exécuter les cellules permet d'obtenir le résultat attendu | Capacité à installer des _packages_ | Découvrir de nouveaux _packages_ en suivant le fil conducteur du projet, découvrir les scripts `Python`, se familiariser avec `Git`  |
| 🟢 | Des instructions détaillées sur la manière de procéder sont proposées | Connaître quelques manipulations avec `Pandas` | Apprendre à utiliser certains _packages_ avec un projet guidé, se familiariser avec les projets `Python` plus conséquents que les _notebooks_ `Jupyter` |
| 🔵 | Instructions moins détaillées | Capacité à manipuler des données avec `Pandas` | Apprendre à modulariser du code pour faciliter sa réutilisation dans une application, découvrir la récupation de données via des API |
| 🔴 | Peu d'instructions | Expérience en développement de code `Python` | Découvrir la création d'application ou se familiariser avec l'écosystème `DuckDB` |
| ⚫ | Autonomie | Bonne maîtrise de `Python` et de la ligne de commande ̀`Linux` | S'initier au déploiement d'une application ou à l'ingénierie de données |

Le parcours vers la mise en oeuvre d'une application fonctionnelle se fait par étapes, en séquençant le projet
pour permettre d'avoir un projet lisible, reproductible et modulaire. 

Les étapes ne sont
pas forcément de difficulté graduelle, il s'agit plutôt de séquencer de manière logique le projet
pour vous faciliter la prise en main.

Il est donc tout à fait possible de passer, selon les parties, d'une voie 🟢 à une voie 🔵 ou bien de tester les codes proposés dans la voie 🟡 d'abord puis, une fois que la logique a été comprise, essayer de les faire soit-même via la voie 🟢 ou encore essayer via la voie 🔵, ne pas y parvenir du fait du caractère plus succinct des instructions et regarder les instructions de la voie 🟢 ou la solution de la voie 🟡.

Il est même tout à fait possible de sauter une étape et reprendre à partir de la suivante grâce aux _checkpoints_ proposés. 

Les consignes sont encapsulées dans des boites dédiées, afin d'être séparées des explications générales. 

Par exemple, la boite verte prendra l'aspect suivant:

::: {.cell .markdown}
<!----- boite 🟢 ----->

```{=html}
```{python}
#| echo: false
#| output: asis
#| eval: true
from utils_notebook import create_box_level
create_box_level(color = "🟢", title = "Exemple (🟢)")
```
<details>
<summary>Dérouler pour révéler les instructions</summary>
```

Utiliser la fonction `print` pour afficher le texte _"Toto"_

```{=html}
</details>
</div>
```

<!----- end 🟢 ----->
:::



alors que sur le même exercice, si plusieurs voies peuvent emprunter le même chemin, on 
utilisera une délimitation grise :

::: {.cell .markdown}
<!----- boite 🔵 ----->

```{=html}
```{python}
#| echo: false
#| output: asis
#| eval: true
from utils_notebook import create_box_level
create_box_level(color = "grey", title = "Exemple (🔵,🔴,⚫)")
```
<details>
<summary>Dérouler pour révéler les instructions</summary>
```

Afficher le texte _"Toto"_

```{=html}
</details>
</div>
```

<!----- end 🔵 ----->
:::


La solution associée, visible pour les personnes sur la voie 🟡, sera :

```{python}
# Solution pour voie 🟡
print("toto")
```


## Etapes du projet

Le projet est séquencé de la manière suivante : 

| Etape | Objectif |
|--------|---------|
| Récupération et nettoyage de la base `OpenFoodFacts` | Lire des données avec `Pandas` depuis un site web (🟡,🟢,🔵,🔴,⚫), appliquer des nettoyages de champs textuels (🟡,🟢,🔵,🔴,⚫), catégoriser ces données avec un classifieur automatique (🟡,🟢,🔵,🔴,⚫) voire entrainer un classifieur _ad hoc_ (🔴,⚫), écrire ces données sur un système de stockage distant (🟡,🟢,🔵,🔴,⚫) |
| Faire des statistiques agrégées par catégories | Utiliser `Pandas` (🟡,🟢,🔵) ou ̀`DuckDB` (🔴,⚫) pour faire des statistiques par groupe |
| Trouver un produit dans `OpenFoodFacts` à partir d'un code barre | Détection visuelle d'un code barre (🟡,🟢,🔵, 🔴,⚫), rechercher des données avec des critères d'appariement exact comme le code barre via `Pandas` (🟡,🟢,🔵) ou ̀`DuckDB` (🔴,⚫)  ou via des distances textuelles (🔴,⚫)|
| Encapsuler ces étapes dans une application `Streamlit` | Tester une application `Streamlit` minimale (🟡,🟢,🔵, 🔴,⚫), personnaliser celle-ci (🔴,⚫ ou 🟡,🟢,🔵 désirant se focaliser sur `Streamlit`) |
| Mettre en production cette application | Déployer grâce à des serveurs standardisés une application `Streamlit` (🔴,⚫) ou proposer une version sans serveur (⚫ voulant se familiariser à `Observable`) |


Le développement à proprement parler de l'application est donc assez tardif car un certain nombre d'étapes préalables sont nécessaires pour ne pas avoir une application monolithique (ce qui est une bonne pratique). Si vous n'êtes intéressés que par développer une application `Streamlit`, vous pouvez directement passer aux étapes concernées (à partir de la partie 3️). 

La première étape (1️⃣ _Récupération et nettoyage de la base `OpenFoodFacts`_) peut être assez chronophage. Cela est assez représentatif des projets de _data science_ où la majorité du temps est consacrée
à la structuration et la manipulation de données. La deuxième étape (2️ _"Faire des statistiques agrégées par catégories"_) est la moins centrale de ce sujet : si vous manquez de temps vous pouvez la passer
et utiliser directement les morceaux de code mis à disposition. 


## Remarques

Cette page peut être consultée par différents canaux :

- Sur un site web, les codes
faisant office de solution sont, par défauts, cachés. Cela peut être pratique
de consulter cette page si vous êtes sur un parcours de couleur différente que le 
jaune et ne voulez pas voir la solution sans le vouloir ;
- Sur un notebook `Jupyter`, les solutions de la voie 🟡 sont affichées par défaut.
Elles peuvent être cachées en faisant `View` > `Collapse All Code`

## Sources et packages utilisés

Notre source de référence sera [`OpenFoodFacts`](https://fr.openfoodfacts.org/), une 
base contributive sur les produits alimentaires. 


::: {.cell .markdown}
```{=html}
<div class="alert alert-warning" role="alert" style="color: rgba(0,0,0,.8); background-color: white; margin-top: 1em; margin-bottom: 1em; margin:1.5625emauto; padding:0 .6rem .8rem!important;overflow:hidden; page-break-inside:avoid; border-radius:.25rem; box-shadow:0 .2rem .5rem rgba(0,0,0,.05),0 0 .05rem rgba(0,0,0,.1); transition:color .25s,background-color .25s,border-color .25s ; border-right: 1px solid #dee2e6 ; border-top: 1px solid #dee2e6 ; border-bottom: 1px solid #dee2e6 ; border-left:.2rem solid #ffc10780;">
<h3 class="alert-heading"><i class="fa fa-lightbulb-o"></i> Hint</h3>
```
Nous utiliserons également un classifieur automatique issu du projet [`predicat`](https://github.com/InseeFrLab/predicat).
Il s'agit d'un modèle qui utilise des noms de produits pour leur associer des catégories de la
nomenclature [COICOP (Classification des fonctions de consommation des ménages)](https://www.insee.fr/fr/information/2408172).

Ce modèle est là à des fins de démonstration du principe de la classification automatique et de la manière dont celle-ci
peut être intégrée à un processus de production de données. Il ne s'agit pas d'un modèle
officiel de l'Insee. 

```{=html}
</div>
```

:::



{{< include content/_1_recup.qmd >}}
{{< include content/_2_statistics.qmd >}}
{{< include content/_3_match_barcode.qmd >}}
{{< include content/_4_app.qmd >}}
{{< include content/_5_deployment.qmd >}}


