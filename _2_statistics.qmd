##Â 2. Faire des statistiques agrÃ©gÃ©es par catÃ©gories

Cette partie permet de calculer en amont de l'application des
statistiques descriptives qui pourront Ãªtre utilisÃ©es
par celle-ci. 

Il est prÃ©fÃ©rable de minimiser la quantitÃ© de calculs
faits Ã  la volÃ©e dans le cadre d'une application. Sinon,
le risque est une latence embÃªtante pour l'utilisateur
voire un crash du serveur Ã  cause de besoins
de ressources trop importants.

Cette partie propose ainsi de crÃ©er en avance deux
bases de donnÃ©es synthÃ©tisant certaines statistiques
descriptives:

- Pour les variables nutritionnelles (calories, glucides, etc.), les
dÃ©ciles de la distribution. Ils permettront de placer notre produit
par rapport Ã  des produits similaires (ceux partageant la mÃªme variable
de catÃ©gorie, crÃ©Ã©e prÃ©cÃ©demment). 
- Pour les notes synthÃ©tiques (nutriscore, score nova et Ã©coscore), le
nombre de produits dans une catÃ©gorie donnÃ©e (par exemple les
fromages Ã  pate crue) qui ont la mÃªme note.

### PrÃ©liminaire (ðŸŸ¡,ðŸŸ¢,ðŸ”µ,ðŸ”´,âš«)


Sur le plan technique, cette partie propose deux cadres de manipulation
de donnÃ©es diffÃ©rents,
selon le balisage de la voie:

- ðŸŸ¡,ðŸŸ¢,ðŸ”µ: utilisation de `Pandas`
- ðŸ”´,âš«: requÃªtes SQL directement sur le fichier `Parquet` grÃ¢ce Ã  `DuckDB`


Cette partie peut Ãªtre faite sans avoir suivie la prÃ©cÃ©dente. 
Il est alors recommandÃ© d'effectuer deux actions:

1. Dans le fichier `config.yaml`, remplacer `"projet-funathon"` par votre nom
d'utilisateur sur le `SSP Cloud`
2. Utiliser la commande suivante pour copier le fichier d'exemple mis Ã  disposition 
vers votre espace personnel :

```{python}
#| eval: false
# remplacer `<USERNAME_SSPCLOUD>` par votre nom d'utilisateur sur le SSPCloud
!mc cp s3/projet-funathon/2023/sujet4/diffusion/openfood.parquet s3/<USERNAME_SSPCLOUD>/2023/sujet4/diffusion/openfood.parquet
```

en remplacant `<USERNAME_SSPCLOUD>` par votre nom d'utilisateur sur le SSPCloud. 

Cette partie va fonctionner en trois temps:

1. Lecture des donnÃ©es `OpenFoodFacts` prÃ©cÃ©demment produites
2. Construction de statistiques descriptives standardisÃ©es
3. Construction de graphiques Ã  partir de ces statistiques descriptives

Les Ã©tapes 1 et 2 sont sÃ©parÃ©es conceptuellement pour les parcours ðŸŸ¡,ðŸŸ¢,ðŸ”µ. 
Pour les parcours ðŸ”´ et âš«, l'utilisation de requÃªtes SQL fait que ces
deux Ã©tapes conceptuelles sont intriquÃ©es. Les parcours ðŸŸ¡,ðŸŸ¢,ðŸ”µ
peuvent observer les morceaux de code proposÃ©s dans le cadre ðŸ”´ et âš«,
c'est assez instructif. 

Nous proposons d'importer Ã  nouveau nos configurations:

```{python}
from utils.import_yaml import import_yaml
config = import_yaml("config.yaml")
```

Les colonnes suivantes nous seront utiles dans cette partie:

```{python}
info_nutritionnelles = [
    'energy-kcal_100g', 'fat_100g', 'saturated-fat_100g',
    'carbohydrates_100g', 'sugars_100g',
    'proteins_100g', 'salt_100g']
indices_synthetiques = [
    "nutriscore_grade", "ecoscore_grade", "nova_group"
]
principales_infos = ['product_name', 'code', 'preprocessed_labels', 'coicop']
```

Voici, Ã  nouveau, la configuration pour permettre Ã  `Python`
de communiquer avec l'espace de stockage distant:

```{python}
import s3fs

config = import_yaml("config.yaml")
INPUT_OPENFOOD = f"{config['BUCKET']}{config['DESTINATION_DATA_S3']}/openfood.parquet"

# Initialisation de la connexion
fs = s3fs.S3FileSystem(
    client_kwargs={"endpoint_url": config["ENDPOINT_S3"]}
)
```



## Import des donnÃ©es depuis l'espace de stockage distant avec `Pandas` (ðŸŸ¡,ðŸŸ¢,ðŸ”µ)

Il est recommandÃ© pour les parcours ðŸŸ¡,ðŸŸ¢,ðŸ”µ de travailler avec `Pandas` pour construire
des statistiques descriptives. Cela se fera en deux Ã©tapes:

- Import des donnÃ©es directement depuis l'espace de stockage, sans Ã©criture intermÃ©diaire sur le disque local,
puis nettoyage de celles-ci ;
- Construction de fonctions standardisÃ©es pour la production de statistiques descriptives.

### Import et nettoyage des donnÃ©es `OpenFoodFacts`

```{python}
#| classes: yellow-code
#| label: get-openfood-parquet
#| output: false

import pandas as pd

# methode 1: pandas
with fs.open(fINPUT_OPENFOOD, "rb") as remote_file:
    openfood = pd.read_parquet(
        remote_file,
        columns = principales_infos + \
        info_nutritionnelles + indices_synthetiques
    )

```

stats_nutritionnelles = openfood.loc[:,info_nutritionnelles + ["coicop"]].groupby("coicop").quantile([i/10 for i in range(1,10)]).reset_index(names=['coicop', 'quantile'])
stats_nutritionnelles['quantile'] = stats_nutritionnelles['quantile'].mul(10).astype(int)
stats_nutritionnelles = pd.melt(stats_nutritionnelles, id_vars=['coicop', 'quantile'])

#stats_notes = stats_notes.loc[stats_notes['note'].isin(['a','b','c','d','e'])]

stats_notes = openfood.loc[:,["coicop"] + indices_synthetiques].groupby("coicop").agg({i:'value_counts' for i in indices_synthetiques}).reset_index(names=['coicop', 'note'])
stats_notes = pd.melt(stats_notes, id_vars = ['coicop','note'])
stats_notes['note'] = stats_notes['note'].astype(str)
stats_notes['value'] = stats_notes['value'].astype("Int64")
stats_notes = stats_notes.dropna().drop_duplicates(subset = ['variable','note','coicop'])
stats_notes = stats_notes.loc[~stats_notes['note'].isin(['unknown','not-applicable'])]
stats_notes.loc[stats_notes['variable'] == "nova_group", "note"] = (
    stats_notes.loc[stats_notes['variable'] == "nova_group", "note"]
    .astype(float).astype("int64", errors = "ignore").apply(lambda d: chr(d + 64))
)
stats_notes['note'] =  stats_notes['note'].str.upper()
stats_notes['note'] = stats_notes['note'].astype(str)

import numpy as np
variable = 'energy-kcal_100g'
example_coicop = stats_nutritionnelles.loc[stats_nutritionnelles['variable'] == variable]
example_coicop = example_coicop.loc[example_coicop['coicop']=="01.1.7.3.2"]
example_coicop['color'] = np.where(example_coicop['quantile'] == 8, "red", "royalblue")


import plotly.express as px

fig = px.bar(
    example_coicop,
    x='quantile', y='value', color = "color", template = "simple_white",
    title=variable,
    labels={
        "quantile": "",
        "value": "Par portion de 100g"
    }
)
fig.update_layout(showlegend=False)
fig.update_layout(hovermode="x")
fig.update_traces(
    hovertemplate="<br>".join([
        "DixiÃ¨me nÂ° %{x}",
        f"{variable}: " + " au moins %{y} par portion de 100g"
    ])
)

import numpy as np
variable = 'nutriscore_grade'
example_coicop = stats_notes.loc[stats_notes['variable'] == variable]
example_coicop = example_coicop.loc[stats_notes['coicop']=="01.1.7.3.2"]
example_coicop['color'] = np.where(example_coicop['note'] == "B", "red", "royalblue")
#example_coicop['color'] = np.where(example_coicop['quantile'] == 8, "red", "royalblue")

import plotly.express as px

fig = px.bar(
    example_coicop,
    x='note', y='value', color = "color", template = "simple_white",
    title=variable,
    labels={
        "note": "Note",
        "value": ""
    }
)
fig.update_xaxes(
    categoryorder='array',
    categoryarray= ['A', 'B', 'C', 'D', 'E'])
fig.update_layout(showlegend=False)
fig.update_layout(hovermode="x")
fig.update_traces(
    hovertemplate="<br>".join([
        "Note %{x}",
        f"{variable}: " +" %{y} produits"
    ])
)
```