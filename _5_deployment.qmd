# 4. D√©ploiement de l'application interactive

## 4.1. Pr√©liminaires (üîµ,üî¥,‚ö´)

L'application construite dans la partie pr√©c√©dente reste pour le moment √† un niveau local: elle n'est accessible que via l'utilisateur qui l'a d√©ploy√©e et ce sur la machine o√π elle a √©t√© d√©ploy√©e. L'objectif de cette derni√®re partie est de **d√©ployer** l'application, c'est √† dire de la rendre accessible en continu √† n'importe quel utilisateur. Pour cela, on va devoir s'int√©resser √† la technologie des **conteneurs**, qui est √† la base des infrastructures de production modernes.

Le fait de lancer ce notebook via un simple [lien de lancement](LIEN A METTRE) nous a permis de commencer √† travailler directement, sans trop nous soucier de l'environnement de d√©veloppement dans lequel on se trouvait. Mais d√®s lors que l'on souhaite passer de son environnement de d√©veloppement √† un environnement de production, il est n√©cessaire de se poser un ensemble de questions pour s'assurer que le projet fonctionne ailleurs que sur sa machine personnelle :
- quelle est la version de `Python` √† installer pour que le projet fonctionne ?
- quels sont les packages `Python` utilis√©s par le projet et quelles sont leurs versions ?
- quelles sont les √©ventuelles librairies syst√®mes, i.e. d√©pendantes du syst√®me d'exploitation install√©, n√©cessaires pour que les packages `Python` s'installent correctement ?

La technologie standard pour assurer la **portabilit√©** d'un projet, c'est √† dire de fonctionner sur diff√©rents environnements informatiques, est celle des **conteneurs**. Sch√©matiquement, il s'agit de bo√Ætes virtuelles qui contiennent l'ensemble de l‚Äôenvironnement (librairies syst√®mes, interpr√©teur `Python`, code applicatif, configuration...) permettant de faire tourner l‚Äôapplication, tout en restant l√©g√®res et donc faciles √† redistribuer. En fait, chaque service lanc√© sur le `SSP Cloud` est un conteneur, et ce notebook tourne donc lui-m√™me... dans un conteneur ! L'enjeu de cette partie est donc de d√©voiler pas √† pas la bo√Æte noire afin de comprendre dans quel environnement on se trouve, et comment celui-ci va nous permettre de d√©ployer notre application.

## Conteneurisation de l'application (üîµ,üî¥,‚ö´)

::: {.cell .markdown}
<!----- boite üîµ ----->

```{=html}
```{python}
#| echo: false
#| output: asis
#| eval: true
from utils_notebook import create_box_level
create_box_level(color = "üîµ", title = "Comprendre la cr√©ation de l'image `Docker` de l'application (üîµ)")
```
<details>
<summary>D√©rouler pour r√©v√©ler les instructions</summary>
```

Le projet contient √† la racine un fichier `Dockerfile`. Il s'agit de la "recette" de construction de l'image `Docker` de l'application, i.e. qui sp√©cifie l'environnement n√©cessaire √† son bon fonctionnement. En vous inspirant de la [documentation Streamlit](https://docs.streamlit.io/knowledge-base/tutorials/deploy/docker#create-a-dockerfile) (en Anglais) ou bien de cette [page de cours](https://ensae-reproductibilite.github.io/website/chapters/portability.html#dockerfile), essayez de comprendre pas √† pas les √©tapes de construction de l'image `Docker` de l'application.

```{=html}
</details>
</div>
```

<!----- end üîµ ----->
:::

::: {.cell .markdown}
<!----- boite üî¥, ‚ö´ ----->

```{=html}
```{python}
#| echo: false
#| output: asis
#| eval: true
from utils_notebook import create_box_level
create_box_level(color = "grey", title = "Cr√©er le `Dockerfile` de l'application (üî¥, ‚ö´)")
```
<details>
<summary>D√©rouler pour r√©v√©ler les instructions</summary>
```

Une image `Docker` est construite √† partir d'un fichier sp√©cifique g√©n√©ralement plac√© √† la racine du projet, le `Dockerfile`. Sans regarder le `Dockerfile` existant dans le projet, et en vous inspirant de la [documentation Streamlit](https://docs.streamlit.io/knowledge-base/tutorials/deploy/docker#create-a-dockerfile) (en Anglais) essayez de construire le `Dockerfile` pertinent pour l'application, puis comparez votre solution √† l'existant. Quelques consignes suppl√©mentaires :
- on utilisera comme image de base `inseefrlab/onyxia-jupyter-python:py3.10.9`
- on se mettra en utilisateur *root* via l'[instruction USER](https://docs.docker.com/engine/reference/builder/#user)
- on aura besoin d'installer les librairies syst√®me suivantes via `apt-get` : `ffmpeg, libsm6, libxext6, libzbar0`
- on copiera tous les fichiers du projet local sur l'image `Docker` √† l'aide de l'[instruction COPY](https://docs.docker.com/engine/reference/builder/#copy)
- on fera tourner l'application sur le port `8000` du conteneur (qu'il faudra donc prendre soin d'exposer)
- on ne fera pas de `HEALTHCHECK`

```{=html}
</details>
</div>
```

<!----- end üî¥, ‚ö´ ----->
:::

::: {.cell .markdown}
<!----- boite ‚ö´ ----->

```{=html}
```{python}
#| echo: false
#| output: asis
#| eval: true
from utils_notebook import create_box_level
create_box_level(color = "‚ö´", title = "Construire l'image `Docker` de l'application par int√©gration continue (‚ö´)")
```
<details>
<summary>D√©rouler pour r√©v√©ler les instructions</summary>
```

Une fois le `Dockerfile` construit (du moins sa premi√®re version), on va l'utiliser pour construire une image `Docker` (la "bo√Æte" virtuelle) et mettre celle-ci sur un registre (r√©pertoire d'images) afin que celle-ci puisse √™tre r√©utilis√©e dans un autre environnement que celui o√π on l'a d√©velopp√©e. On pourrait faire cela "√† la main" en ligne de commandes (cf. [documentation Docker](https://docs.docker.com/get-started/02_our_app/)), mais on va plut√¥t automatiser le processus en passant par un *pipeline* (s√©rie d'√©tapes) d'int√©gration continue. Ainsi, √† chaque mise √† jour du code source de l'application (nouvelles fonctionnalit√©s, correction de bugs, etc.), notre image sera automatiquement mise √† jour.

Les √©tapes √† suivre sont les suivantes :
- si n√©cessaire, cr√©er un compte personnel sur [GitHub](https://github.com) et sur le [DockerHub](https://hub.docker.com/) (registre d'images open-source)
- bien s'assurer que le `Dockerfile` obtenu √† l'√©tape pr√©c√©dente est identique √† celui existant dans le projet
- [forker](https://docs.github.com/fr/get-started/quickstart/fork-a-repo) le [d√©p√¥t du projet](https://github.com/InseeFrLab/funathon2023_sujet4) afin de l'avoir dans votre espace personnel sur `GitHub`
- [cloner](https://docs.github.com/fr/repositories/creating-and-managing-repositories/cloning-a-repository) le d√©p√¥t fork√© (i.e. de la forme `votre_nom_utilisateur_gh/funathon2023_sujet4`) via un terminal
- cr√©er un nouveau d√©p√¥t public sur le `DockerHub`
- cr√©er les secrets `DOCKERHUB_USERNAME` et `DOCKERHUB_TOKEN` (cf. [documentation Docker](https://docs.docker.com/build/ci/github-actions/#step-one-create-the-repository)), n√©cessaires pour que le CI `GitHub` puisse pousser une image sur le `DockerHub`
- ajuster le fichier d'int√©gration continue (`.github/workflows/docker.yaml`) pour que le d√©p√¥t sur lequel est envoy√© l'image ne soit plus `inseefrlab/funathon2023_sujet4` mais `votre_nom_utilisateur_dh/funathon2023_sujet4`
- *commit*/*push* les changements sur `GitHub`
- si tout s'est bien pass√©, une action devrait se lancer (cf. onglet `Actions` du d√©p√¥t) afin de construire l'image et de l'envoyer sur le `DockerHub`
- si l'action s'est bien d√©roul√©e (fl√®che verte), aller v√©rifier que l'image est bien disponible dans votre espace sur le `DockerHub`

```{=html}
</details>
</div>
```

<!----- end ‚ö´ ----->
:::



## D√©ploiement sur le `SSP Cloud`

Maintenant que l'image de notre application est disponible sur le `DockerHub`, elle peut √† pr√©sent √™tre r√©cup√©r√©e (*pull*) et d√©ploy√©e sur n'importe quel environnement. Dans notre cas, on va la d√©ployer sur un cluster `Kubernetes`, l'infrastructure sous-jacente du `SSP Cloud`. Le fonctionnement de `Kubernetes` est assez technique, mais l'on pourra s'abstraire de certaines parties selon le niveau de difficult√© choisi.


::: {.cell .markdown}
<!----- boite üî¥,‚ö´ ----->

```{=html}
```{python}
#| echo: false
#| output: asis
#| eval: true
from utils_notebook import create_box_level
create_box_level(color = "grey", title = "D√©ploiement de l'application √† partir du `DockerHub` `InseeFrLab` (üî¥,‚ö´)")
```
<details>
<summary>D√©rouler pour r√©v√©ler les instructions</summary>
```

En amont de ce projet, nous avons construit une image `Docker` fonctionnelle de l'application, disponible sur le `DockerHub` dans l'espace [inseefrlab](https://hub.docker.com/repository/docker/inseefrlab/funathon2023_sujet4). Nous avons √©galement cr√©√©s dans le r√©pertoire `deployment/` √† la racine du projet les trois fichiers standards n√©cessaires au d√©ploiement d'une application sur `Kubernetes`. 

Afin de d√©ployer l'application, suivre les instructions suivantes :
- inspecter les fichiers `deployment.yml`, `service.yml` et `ingress.yml` et rep√©rer les √©l√©ments suivants :
    - o√π est sp√©cifi√©e l'image que l'on va d√©ployer. Pour la difficult√© ‚ö´: remplacer l'image actuelle par celle que vous avez construite et envoy√©e sur le `DockerHub` dans la partie pr√©c√©dente
    - o√π sont sp√©cifi√©es les ressources computationnelles que l'on va allouer √† l'application
    - o√π est d√©fini le port que l'on a expos√© dans le `Dockerfile`
    - o√π est d√©fini le port sur lequel on va exposer l'application sur le cluster `Kubernetes`
    - o√π est d√©finie l'URL √† laquelle on va exposer l'application pour que les utilisateurs puissent s'y connecter. La modifier (√† 2 reprises) pour y indiquer une adresse personalis√©e pour votre d√©ploiement. Seule contrainte : elle doit √™tre de la forme : `*.lab.sspcloud.fr` 
- ouvrir un terminal dans le service `Jupyter`
- se placer dans le projet du funathon : `cd funathon2023_sujet4`
- appliquer les contrats de d√©ploiement : `kubernetes apply -f deployment/`
- v√©rifier le lancement du conteneur : `watch kubernetes get pods`. Le nom associ√© devrait √™tre de la forme `funathon2023-sujet4-****-*****`
- une fois que le conteneur est indiqu√© comme `Running`, entrer dans un navigateur l'URL que vous avez sp√©cifi√© dans le fichier `ingress.yml`, et v√©rifier que l'application fonctionne correctement

```{=html}
</details>
</div>
```

<!----- end üî¥,‚ö´ ----->
:::

Votre application est maintenant d√©ploy√©e, vous pouvez partager cette URL avec n'importe quel utilisateur dans le monde !
