# 4Ô∏è‚É£ Construire une application interactive

Cette partie vise √† assembler les briques pr√©c√©dentes afin de les rendre facilement accessibles √† un utilisateur final.
Pour cela, nous allons construire une application interactive √† l'aide du framework `Streamlit` en `Python`.

L'objectif est de cr√©er une application sur le mod√®le de [myyuka.lab.sspcloud.fr/](https://myyuka.lab.sspcloud.fr/).
Voici une petite vid√©o de d√©monstration de l'application:


```{python}
#| eval: true
from IPython.display import HTML
HTML("""
    <video width="520" height="240" alt="test" controls>
        <source src="https://minio.lab.sspcloud.fr/projet-funathon/2023/sujet4/diffusion/video_out.webm" type="video/mp4">
    </video>
""")
```

Selon le parcours suivi, la construction de cette application sera plus ou moins guid√©e. 

## 4.1. Lancer l'application pour la tester (üü°,üü¢,üîµ,üî¥,‚ö´)

Il est rare d'avoir une application fonctionnelle du premier coup, cela peut demander
beaucoup d'essai-erreur pour parvenir √† ses fins. Il est donc utile de r√©guli√®rement
lancer l'application pour la tester. Cela se fait en lan√ßant un serveur local,
c'est-√†-dire en cr√©ant une t√¢che qui fonctionne en arri√®re-plan et qui va cr√©er une 
interaction entre un navigateur et du code `Python`. 

Pour lancer ce serveur web local plusieurs m√©thodes sont possibles sur le `SSP Cloud`,
en partant du principe que votre application est stock√©e dans un fichier `app.py`

- Pour les personnes famili√®res de la ligne de commande, vous pouvez 
en lancer une (en cliquant sur `+` dans le menu √† gauche de `Jupyter` 
et ex√©cuter, dans le bon dossier de travail, `streamlit run app.py --server.port 5000 --server.address 0.0.0.0` 
- Pour les personnes d√©sirant lancer la commande depuis `Jupyter`,
il suffit d'ex√©cuter la cellule suivante:

```{python}
#| eval: false
!streamlit run app.py --server.port 5000 --server.address 0.0.0.0
```

Remarque: si vous n'√™tes pas sur le `SSP Cloud`, vous pouvez retirer
l'option `--server.address 0.0.0.0`. 

Il reste √† acc√©der au navigateur sur lequel l'application a √©t√© d√©ploy√©e. 
Sur un poste local, vous ouvririez l'URL `localhost:5000` sur votre navigateur. 
Pour acc√©der √† votre application depuis le SSP Cloud, il va falloir y acc√©der
diff√©remment. 

1. Il convient d'ouvrir un nouvel onglet sur votre navigateur web pour retourner sur
votre espace SSPCloud: [datalab.sspcloud.fr/my-services](https://datalab.sspcloud.fr/my-services).
Si vous √™tes sur une autre page, vous pouvez cliquer √† gauche sur `My Services`.
2. Ensuite, il faut cliquer sur le bouton `README` pour acc√©der √† des informations sur le 
service `Jupyter` ouvert. 

![](img/demo_readme_sspcloud.png)

Il faut ensuite cliquer sur le lien ci-dessous:

![](img/demo_readme_sspcloud2.png)

Cela va ouvrir un nouvel onglet sur votre navigateur o√π, cette fois, vous aurez l'application.
Chaque action que vous effectuerez sur celle-ci d√©clenchera une op√©ration dans la  
ligne de commande que vous avez lanc√©e. 

Pour le parcours üü°, la voie s'arr√™te √† ce niveau. Vous pouvez n√©anmoins basculer du c√¥t√© de la
voie üü¢ pour apprendre de mani√®re guid√©e √† cr√©er votre application `Streamlit`.

Pour les parcours üü¢,üîµ,üî¥ et ‚ö´, vous allez pouvoir cr√©er vous-m√™me l'application, de mani√®re 
plus ou moins guid√©e. 


## 4.2. Cr√©er l'application dans un serveur temporaire  (üü¢,üîµ,üî¥,‚ö´)

Voici la gradation des niveaux pour cr√©er l'application:

- üü¢: Lire et comprendre le contenu du fichier `app.py` qui g√©n√®re l'application
- üîµ: Apr√®s avoir supprim√© le fichier d'exemple `app.py`,
mettre en oeuvre l'application avec des consignes guid√©es
- üî¥: Apr√®s avoir supprim√© le fichier d'exemple `app.py`, mettre en oeuvre l'application
√† partir d'un cachier des charges d√©taill√©
- ‚ö´: Apr√®s avoir supprim√© le fichier d'exemple `app.py`, mettre en oeuvre l'application
uniquement √† partir de l'exemple sur [myyuka.lab.sspcloud.fr/](https://myyuka.lab.sspcloud.fr/)
et de la vid√©o pr√©c√©demment pr√©sent√©e. Id√©alement, faire en sorte que le contenu du site soit
_responsive_ c'est-√†-dire qu'il soit bien adapt√© √† la taille de l'√©cran. 

::: {.cell .markdown}
<!----- boite ‚ö´ ----->

```{=html}
```{python}
#| echo: false
#| output: asis
#| eval: true
from utils_notebook import create_box_level
create_box_level(color = "grey", title = "Cr√©er l'application (‚ö´)")
```
<details>
<summary>D√©rouler pour r√©v√©ler les instructions</summary>
```

Bon courage, force et honneur, tout √ßa tout √ßa...

```{=html}
</details>
</div>
```

<!----- end ‚ö´ ----->
:::


::: {.cell .markdown}
<!----- boite üî¥ ----->

```{=html}
```{python}
#| echo: false
#| output: asis
#| eval: true
from utils_notebook import create_box_level
create_box_level(color = "grey", title = "Cr√©er l'application (üî¥)")
```
<details>
<summary>D√©rouler pour r√©v√©ler les instructions</summary>
```

Pour commencer, voici l'ensemble de l'environnement, que nous vous proposons de prendre
comme donn√©:

```python
    import streamlit as st
    from streamlit_javascript import st_javascript
    
    import cv2
    import pandas as pd
    import duckdb
    
    from utils.detect_barcode import extract_ean, visualise_barcode
    from utils.pipeline import find_product_openfood
    from utils.construct_figures import plot_product_info
    from utils.utils_app import local_css, label_grade_formatter
    from utils.download_pb import import_coicop_labels
    
    # Une personnalisation sympa pour l'onglet
    st.set_page_config(page_title="PYuka", page_icon="üçé")
    
    
    # --------------------
    # METADATA
    indices_synthetiques = [
        "nutriscore_grade", "ecoscore_grade", "nova_group"
    ]
    principales_infos = [
        'product_name', 'code', 'preprocessed_labels', 'coicop', \
        'url', 'image_url'
    ]
    liste_colonnes = principales_infos + indices_synthetiques
    liste_colonnes_sql = [f"\"{s}\"" for s in liste_colonnes]
    liste_colonnes_sql = ', '.join(liste_colonnes_sql)
    
    con = duckdb.connect(database=':memory:')
    con.execute("""
        INSTALL httpfs;
        LOAD httpfs;
        SET s3_endpoint='minio.lab.sspcloud.fr'
    """)
    
    # LOAD DATASET
    url_data = "https://projet-funathon.minio.lab.sspcloud.fr/2023/sujet4/diffusion/openfood.parquet"
    stats_notes = pd.read_parquet("https://minio.lab.sspcloud.fr/projet-funathon/2023/sujet4/diffusion/stats_notes_pandas.parquet")
    coicop = import_coicop_labels(
        "https://www.insee.fr/fr/statistiques/fichier/2402696/coicop2016_liste_n5.xls"
    )
    
    # --------------------
    
    
    st.title('Mon Yuka ü•ï avec Python üêç')
    
    # Feuille de style & taille de l'√©cran pour adapter l'interface
    local_css("style.css")
    width = st_javascript(
        "window.innerWidth"
    )
```

1. Si l'√©cran a une taille suffisante (on propose comme taille discriminante 500px),la partie gauche de l'√©cran est consacr√©e aux _inputs_ (sinon c'est en haut de la page) :
    + Un bouton permet √† l'utilisateur de choisir sa m√©thode d'_upload_ de photo: soit un _file uploader_, soit une capture √† partir de la cam√©ra
    + Si l'√©cran a une taille suffisante, afficher l'image reconnue
    + Cr√©er une liste modifiable de statistiques √† afficher √† partir d'un s√©lecteur adapt√©.
Pour formatter les champs √† afficher, vous pouvez utiliser la fonction `label_grade_formatter`
qui va, par exemple, transformer `nutriscore_grade` en `Nutriscore`
2. Cr√©er le corps principal de l'application avec les instructions suivantes:
    + Cr√©er une fonction enrobant `find_product_openfood` pour r√©cup√©rer la donn√©e adapt√©e √† partir d'un EAN. Nomm√© le `DataFrame` obtenu `subset`
    + Utiliser  `extract_ean` pour d√©coder l'image. Stocker l'objet en sortie d'`OpenCV` sous le nom `decoded_objects`
    + A partir de l'objet `subset`: cr√©er un texte qui renvoie vers l'URL du produit sur `OpenFoodFacts`, afficher l'image du produit, afficher le `DataFrame` dans l'interface de notre application
    + Utiliser notre fonction de production de graphique pour afficher des statistiques descriptives √† partir de notre choix d'options. 
```{=html}
</details>
</div>
```

<!----- end üî¥ ----->
:::


::: {.cell .markdown}
<!----- boite üîµ ----->

```{=html}
```{python}
#| echo: false
#| output: asis
#| eval: true
from utils_notebook import create_box_level
create_box_level(color = "grey", title = "Cr√©er l'application (üîµ)")
```
<details>
<summary>D√©rouler pour r√©v√©ler les instructions</summary>
```

Pour commencer, voici l'ensemble de l'environnement, que nous vous proposons de prendre
comme donn√©:

```python
    import streamlit as st
    from streamlit_javascript import st_javascript
    
    import cv2
    import pandas as pd
    import duckdb
    
    from utils.detect_barcode import extract_ean, visualise_barcode
    from utils.pipeline import find_product_openfood
    from utils.construct_figures import plot_product_info
    from utils.utils_app import local_css, label_grade_formatter
    from utils.download_pb import import_coicop_labels
    
    # Une personnalisation sympa pour l'onglet
    st.set_page_config(page_title="PYuka", page_icon="üçé")
    
    
    # --------------------
    # METADATA
    indices_synthetiques = [
        "nutriscore_grade", "ecoscore_grade", "nova_group"
    ]
    principales_infos = [
        'product_name', 'code', 'preprocessed_labels', 'coicop', \
        'url', 'image_url'
    ]
    liste_colonnes = principales_infos + indices_synthetiques
    liste_colonnes_sql = [f"\"{s}\"" for s in liste_colonnes]
    liste_colonnes_sql = ', '.join(liste_colonnes_sql)
    
    con = duckdb.connect(database=':memory:')
    con.execute("""
        INSTALL httpfs;
        LOAD httpfs;
        SET s3_endpoint='minio.lab.sspcloud.fr'
    """)
    
    # LOAD DATASET
    url_data = "https://projet-funathon.minio.lab.sspcloud.fr/2023/sujet4/diffusion/openfood.parquet"
    stats_notes = pd.read_parquet("https://minio.lab.sspcloud.fr/projet-funathon/2023/sujet4/diffusion/stats_notes_pandas.parquet")
    coicop = import_coicop_labels(
        "https://www.insee.fr/fr/statistiques/fichier/2402696/coicop2016_liste_n5.xls"
    )
    
    # --------------------
    
    
    st.title('Mon Yuka ü•ï avec Python üêç')
    
    # Feuille de style & taille de l'√©cran pour adapter l'interface
    local_css("style.css")
    width = st_javascript(
        "window.innerWidth"
    )
```

<br>
Nous proposons ensuite de construire ce fichier par √©tape

Etape 1: Construire la partie _inputs_ en suivant le mod√®le
√† trou suivant:

```python
    if width > 500:
        # pour les grands √©crans on met une partie √† gauche
        # qui centralise plusieurs type d'input
        with st.sidebar:
            # 1. choix de la m√©thode d'upload
            if input_method == 'Photo enregistr√©e':
                # 2. file uploader
            else:
                # 3. camera uploader
            
            if input_url is not None:
                # visualise l'image s'il y a un input
                img = visualise_barcode(input_url)
                cv2.imwrite('barcode_opencv.jpg', img)
                # 4. afficher l'image
    
            # 5. choix des statistiques √† afficher
    else:
        # pour les petits √©crans (type smartphone)
        # le file uploader est au d√©but
        # 1. choix de la m√©thode d'upload
        if input_method == 'Photo enregistr√©e':
            # 2. file uploader
        else:
            # 3. camera uploader
            picture = st.camera_input("Take a picture")
            input_url = picture
            # 5. choix des statistiques √† afficher
```

<br>

Celui-ci est √† remplir de la mani√®re suivante:

1. Cr√©er un bouton qui permet √† l'utilisateur de choisir
sa m√©thode d'_upload_ de photo. Celui-ci est √† enregistrer
sous le nom `input_method`
2. Proposer un _file uploader_ dont la valeur peut √™tre utilis√©e
sous le nom `input_url`
3. Proposer un outil de capture de cam√©ra dont la valeur peut √™tre utilis√©e
sous le nom `input_url`
4. Si l'√©cran a une taille suffisante (on propose comme taille discriminante 500px),
afficher l'image stock√©e dans le fichier temporaire `barcode_opencv.jpg`
5. Cr√©er une liste modifiable de statistiques √† afficher √† partir d'un s√©lecteur adapt√©.
Pour formatter les champs √† afficher, vous pouvez utiliser la fonction `label_grade_formatter`
qui va, par exemple, transformer `nutriscore_grade` en `Nutriscore`

Etape 2: Construire la partie s'adaptant √† ces _inputs_ avec le mod√®le suivant
√† trou suivant:

```python
    # ----------------------------------------------------------
    # PARTIE 2: EXPLOITATION DES INPUTS DANS NOTRE APP
    
    
    # CHARGEMENT DE LA LIGNE DANS OPENFOODFACTS
    @st.cache_data
    def load_data(ean):
        # 1. Cr√©er le DataFrame avec la fonction `find_product_openfood` 
        # openfood_data = 
        return openfood_data
    
    if input_url is None:
        # Showcase product
        st.write('Produit exemple: Coca-Cola')
        subset = load_data("5000112602791")
        decoded_objects = extract_ean(subset["image_url"].iloc[0])
    else:
        # 2. utiliser `extract_ean` pour d√©coder l'image
        # decoded_objects
        
    try:
        # 3. R√©cup√©rer l'EAN
        ean = decoded_objects[0].data.decode("utf-8")
        st.markdown(f'üéâ __EAN d√©tect√©__: <span style="color:Red">{ean}</span>', unsafe_allow_html=True)
        subset = load_data(ean)
        # 3. Mettre un lien avec l'URL du produit sur openfoodfacts
        # 4. Afficher l'image du produit
        # 5. Afficher le DataFrame
        # put some statistics
        t = f"<div>Statistiques parmi les <span class='highlight blue'>{subset['category'].iloc[0]}<span class='bold'>COICOP</span>"                
        st.markdown(t, unsafe_allow_html=True)
        # 6. Afficher les figures plotly
    except:
        # we don't manage to get EAN
        st.write('üö® Probl√®me de lecture de la photo, essayez de mieux cibler le code-barre')
        st.image("https://i.kym-cdn.com/entries/icons/original/000/025/458/grandma.jpg")
```

Voici des indications pour compl√©ter ces trous:

1. Cr√©er une fonction enrobant `find_product_openfood` pour r√©cup√©rer la donn√©e adapt√©e √† partir d'un EAN
2. Utiliser  `extract_ean` pour d√©coder l'image. Stocker l'objet en sortie d'`OpenCV` sous le nom `decoded_objects`
3. A partir de l'objet `subset`, cr√©er un texte qui renvoie vers l'URL du produit sur `OpenFoodFacts`
4. Afficher l'image du produit, l'URL √©tant la variable ad√©quate de `subset`
5. Afficher le `DataFrame` dans l'interface de notre application
6. Utiliser notre fonction de production de graphique pour afficher des statistiques descriptives √† partir de notre
choix d'options. 

```{=html}
</details>
</div>
```

<!----- end üîµ ----->
:::

Voici une proposition d'application, afin de reproduire en local le contenu de [myyuka.lab.sspcloud.fr/](https://myyuka.lab.sspcloud.fr/)


```{python}
#| echo: true
#| eval: true
# Solution pour la voie üü¢
with open('app.py', 'r') as file:
    app_content = file.read()

print(
    app_content
)
```

## 4.3. En marche vers la mise en production (üü¢,üîµ,üî¥,‚ö´)

Pour le parcours üü¢, la voie s'arr√™te √† ce niveau. Vous pouvez n√©anmoins basculer du c√¥t√© de la
voie üîµ pour apprendre de mani√®re guid√©e √† mettre en production votre travail en
d√©ployant automatiquement une application. 

Pour les parcours üîµ,üî¥ et ‚ö´, vous allez pouvoir d√©ployer vous-m√™me l'application, de mani√®re 
plus ou moins guid√©e. 